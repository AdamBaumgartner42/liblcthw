Tracing array mergeSort()
** Purpose: follow how merge sort works **
* Text notes for also writing out the tree on paper

** Diagram of steps taken

Start:       3, 7, 5, 8, 1, 4  
              /             \
          3, 7, 5         8, 1, 4 
           /    |          /    |
         3,7    5        8,1    4
        /  |    |       /  |    |     
       3   7    5      8   1    4    
        \  |    |       \  |    |
         3,7    5        1,8    4 
           \   /           \   /
           3, 7, 5        1, 4, 8
               \            /
Sorted:       1, 3, 4, 5, 7, 8

// Start:
arr[] = { 3, 7, 5, 8, 1, 4 }
arr_size = 6

(l = left, r = right)
>> mergeSort(int arr[], int l, int r); 
>> mergeSort(arr, 0, arr_size -1);
** mergeSort(arr, 0, 5);

if(l < r) { 
**(0 < 5) {
    int m = l + (r - l) / 2;
     ** 2 = 0 + (5 - 0) / 2;

>>mergeSort(arr, l, m);
  **mergeSort(arr, 0, 2);

1.>> mergeSort(int arr[], int l, int r); 
** mergeSort(arr, 0, 2);

if(l < r) { 
**(0 < 2) {
    int m = l + (r - l) / 2;
     ** 1 = 0 + (2 - 0) / 2;

>>mergeSort(arr, l, m);
**mergeSort(arr, 0, 1);

2.>> mergeSort(int arr[], int l, int r); 
** mergeSort(arr, 0, 1);

if(l < r) { 
**(0 < 1) {
    int m = l + (r - l) / 2;
     ** 0 = 0 + (1 - 0) / 2;


>>mergeSort(arr, l, m);
**mergeSort(arr, 0, 0);

3.>> mergeSort(int arr[], int l, int r); 
** mergeSort(arr, 0, 0);

if(l < r) { 
**(0 < 0) { *fall through if statement

// ends at level 3. return to level 2.

-> pickup from >> 2. 
l = 0, m = 0, r = 1

4.>> mergeSort(arr, m+1, r);
** mergeSort(arr, 0+1, 1);

5.>> mergeSort(int arr[], int l, int r); 
** mergeSort(arr, 1, 1);

if(l < r) { 
**(0 < 0) { *fall through if statement

-----------------
>> merge(arr, l, m, r);
** merge(arr, 0, 0, 1);
    ## merging indexes 0 and 1
    ## merge takes already sorted loops
    ## copies values to temp lists
    ## direclty modifies arr[]

n1 = m - l + 1;
n1 = 0 - 0 + 1; 1;

n2 = r - m; 
n2 = 1 - 0; 1;

L[1], R[1];
    ## populate with for loops

i=0, j=0, k=l;
while(i<n1 && j<n2){
    if(L[i]<=R[j])
        arr[k]=L[i]
        i++
    else
        arr[k] = R[j]
        j++
    k++

## copy remaining elements L[i], R[i]
while (i < n1)
    arr[k] = L[i]
    i++
    k++

while (j < n2)
    arr[k] = R[j]
    j++
    k++
-----------------
## level 2 end
## return to level 1

l = 0, r = 2
m = 1
** already ran mergeSort(arr, l, m);
now!-> run mergeSort(arr, m+1, r);
mergeSort(arr, m+1, r);
mergeSort(arr, 2, 2);
-> result fall through

-----------------
merge(arr, l, m, r)
merge(arr, 0, 1, 2)
    
    n1 = m - l + 1;
    n1 = 1 - 0 + 1
    n1 = 2;
    
    n2 = r - m;
    n2 = 2 - 1;
    n2 = 1;

    L[] = { 3, 7 };
    R[] = { 5 };


    arr[k] = { 3, 5, 7 };
-----------------
Now back to "0" step.
l=0, m=2, r=5
ms-left has already run. 
now, ms-right runs.

mergeSort(arr, m+1, r);
mergeSort(arr, 2+1, 5);
mergeSort(arr, 3, 5); -> send it

mergeSort(arr, int l, int r)
mergeSort(arr, 3, 5);

if (l < r){
if (3 < 5){

    int m = l + (r - l) / 2;
    m = 3 + (5 - 3)/2;
    m = 3 + 2/2;
    m = 4;

mergeSort(arr, l, m);
mergeSort(arr, 3, 4);

if (l < r){
if (3 < 4){

    int m = l + (r - l) / 2;
    m = 3 + (4 - 3)/2;
    m = 3 + 1/2;
    m = 3;

mergeSort(arr, l, m);
mergeSort(arr, 3, 3);
    -> if statement drops out

mergeSort(arr, m+1, r);
mergeSort(arr, 4, 4); # r = 4a
    -> if statement drops out

-----------------
merge(arr, l, m, r);
merge(arr, 3, 3, 4);

n1 = m - l + 1
n1 = 3 - 3 + 1
n1 = 1;

n2 = r - m;
n2 = 4 - 3; 
n2 = 1; 

populate L[] with offset "l"

populate R[] with offset "m+1"

then. on merge, k = "l"
which allows for offset in arr
-----------------

last mS-L w/o mS-R 
l = 3, m = 4, r = 5
now-> run ms-R
mergeSort(arr, m+1, r);
mergeSort(arr, 4+1, 5);
mergeSort(arr, 5, 5);
    -> if statement drops out

merge(arr, l, m, r);
merge(arr, 3, 4, 5);

-----------------
merge(arr, l, m, r);
merge(arr, 3, 4, 5);

n1 = m - l + 1
n1 = 4 - 3 + 1
n1 = 2;

n2 = r - m;
n2 = 5 - 4; 
n2 = 1; 

populate l[] with offset "l"

populate r[] with offset "m+1"

then. on merge, k = "l"
which allows for offset in arr
-----------------

** now left with one last merge command
** from level 0. ms-l:ok, ms-r: ok

l=0; m=2; r=5;
-----------------
merge(arr, l, m, r);
merge(arr, 0, 2, 5);

n1 = m - l + 1
n1 = 2 - 0 + 1
n1 = 3;

n2 = r - m;
n2 = 5 - 2; 
n2 = 3; 

populate l[] with offset "l"

populate r[] with offset "m+1"

then. on merge, k = "l"
which allows for offset in arr
-----------------

*Finished!

** Diagram of steps

Start:       3, 7, 5, 8, 1, 4  
              /             \
          3, 7, 5         8, 1, 4 
           /    |          /    |
         3,7    5        8,1    4
        /  |    |       /  |    |     
       3   7    5      8   1    4    
        \  |    |       \  |    |
         3,7    5        1,8    4 
           \   /           \   /
           3, 7, 5        1, 4, 8
               \            /
Sorted:       1, 3, 4, 5, 7, 8





    













