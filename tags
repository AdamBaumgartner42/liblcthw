!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/adam/Documents/LCTHW/liblcthw/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20201206.0/
$(SO_TARGET)	Makefile	/^$(SO_TARGET): $(TARGET) $(OBJECTS)$/;"	t
$(TARGET)	Makefile	/^$(TARGET): CFLAGS +=-fPIC$/;"	t
$(TARGET)	Makefile	/^$(TARGET): build $(OBJECTS)$/;"	t
$(TESTS)	Makefile	/^$(TESTS):  $(TARGET) $(LIBS) $(SO_TARGET)$/;"	t
CFLAGS	Makefile	/^CFLAGS=-g -O2 -Wall -Wextra -Isrc -rdynamic -DNDEBUG $(OPTFLAGS)$/;"	m
CFLAGS	Makefile	/^dev: CFLAGS=-g -Wall -Isrc -Wall -Wextra  $(OPTFLAGS)$/;"	m
LIBS	Makefile	/^LIBS=-ldl $(OPTLIBS)$/;"	m
LIST_FOREACH	src/lcthw/list.h	/^#define LIST_FOREACH(/;"	d
List	src/lcthw/list.h	/^typedef struct List { $/;"	s
List	src/lcthw/list.h	/^} List;$/;"	t	typeref:struct:List
ListNode	src/lcthw/list.h	/^typedef struct ListNode {$/;"	s
ListNode	src/lcthw/list.h	/^} ListNode;$/;"	t	typeref:struct:ListNode
List_clear	src/list.c	/^void List_clear(List * list)$/;"	f	typeref:typename:void
List_clear_destroy	src/list.c	/^void List_clear_destroy(List * list)$/;"	f	typeref:typename:void
List_count	src/lcthw/list.h	/^#define List_count(/;"	d
List_create	src/list.c	/^List *List_create()$/;"	f	typeref:typename:List *
List_destroy	src/list.c	/^void List_destroy(List * list)$/;"	f	typeref:typename:void
List_first	src/lcthw/list.h	/^#define List_first(/;"	d
List_last	src/lcthw/list.h	/^#define List_last(/;"	d
List_pop	src/list.c	/^void *List_pop(List * list)$/;"	f	typeref:typename:void *
List_push	src/list.c	/^void List_push(List * list, void *value)$/;"	f	typeref:typename:void
List_remove	src/list.c	/^void *List_remove(List * list, ListNode * node)$/;"	f	typeref:typename:void *
List_shift	src/list.c	/^void *List_shift(List * list)$/;"	f	typeref:typename:void *
List_unshift	src/list.c	/^void List_unshift(List * list, void *value)$/;"	f	typeref:typename:void
OBJECTS	Makefile	/^OBJECTS=$(patsubst %.c,%.o,$(SOURCES))$/;"	m
PREFIX	Makefile	/^PREFIX?=\/usr\/local$/;"	m
RUN_TESTS	tests/minunit.h	/^#define RUN_TESTS(/;"	d
SOURCES	Makefile	/^SOURCES=$(wildcard src\/**\/*.c src\/*.c)$/;"	m
SO_TARGET	Makefile	/^SO_TARGET=$(patsubst %.a,%.so,$(TARGET))$/;"	m
TARGET	Makefile	/^TARGET=build\/liblcthw.a$/;"	m
TESTS	Makefile	/^TESTS=$(patsubst %.c,%,$(TEST_SRC))$/;"	m
TEST_SRC	Makefile	/^TEST_SRC=$(wildcard tests\/*_tests.c)$/;"	m
__dbg_h__	src/lcthw/dbg.h	/^#define __dbg_h__$/;"	d
_minunit_h	tests/minunit.h	/^#define _minunit_h$/;"	d
all	Makefile	/^all: $(TARGET) $(SO_TARGET) tests$/;"	t
all_tests	tests/list_tests.c	/^char *all_tests()$/;"	f	typeref:typename:char *
build	Makefile	/^build:$/;"	t
check	Makefile	/^check:$/;"	t
check	src/lcthw/dbg.h	/^#define check(/;"	d
check_debug	src/lcthw/dbg.h	/^#define check_debug(/;"	d
check_mem	src/lcthw/dbg.h	/^#define check_mem(/;"	d
clean	Makefile	/^clean:$/;"	t
clean_errno	src/lcthw/dbg.h	/^#define clean_errno(/;"	d
count	src/lcthw/list.h	/^    int count; $/;"	m	struct:List	typeref:typename:int
debug	src/lcthw/dbg.h	/^#define debug(/;"	d
dev	Makefile	/^dev: CFLAGS=-g -Wall -Isrc -Wall -Wextra  $(OPTFLAGS)$/;"	t
dev	Makefile	/^dev: all$/;"	t
first	src/lcthw/list.h	/^    ListNode *first;$/;"	m	struct:List	typeref:typename:ListNode *
install	Makefile	/^install: all$/;"	t
last	src/lcthw/list.h	/^    ListNode *last;$/;"	m	struct:List	typeref:typename:ListNode *
lcthw_List_h	src/lcthw/list.h	/^#define lcthw_List_h$/;"	d
list	tests/list_tests.c	/^static List *list = NULL;$/;"	v	typeref:typename:List *	file:
log_err	src/lcthw/dbg.h	/^#define log_err(/;"	d
log_info	src/lcthw/dbg.h	/^#define log_info(/;"	d
log_warn	src/lcthw/dbg.h	/^#define log_warn(/;"	d
mu_assert	tests/minunit.h	/^#define mu_assert(/;"	d
mu_run_test	tests/minunit.h	/^#define mu_run_test(/;"	d
mu_suite_start	tests/minunit.h	/^#define mu_suite_start(/;"	d
next	src/lcthw/list.h	/^    struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode *
prev	src/lcthw/list.h	/^    struct ListNode *prev;$/;"	m	struct:ListNode	typeref:struct:ListNode *
sentinel	src/lcthw/dbg.h	/^#define sentinel(/;"	d
test1	tests/list_tests.c	/^char *test1 = "test1 data";$/;"	v	typeref:typename:char *
test2	tests/list_tests.c	/^char *test2 = "test2 data";$/;"	v	typeref:typename:char *
test3	tests/list_tests.c	/^char *test3 = "test3 data";$/;"	v	typeref:typename:char *
test_create	tests/list_tests.c	/^char *test_create()$/;"	f	typeref:typename:char *
test_destroy	tests/list_tests.c	/^char *test_destroy()$/;"	f	typeref:typename:char *
test_push_pop	tests/list_tests.c	/^char *test_push_pop()$/;"	f	typeref:typename:char *
test_remove	tests/list_tests.c	/^char *test_remove()$/;"	f	typeref:typename:char *
test_shift	tests/list_tests.c	/^char *test_shift()$/;"	f	typeref:typename:char *
test_unshift	tests/list_tests.c	/^char *test_unshift()$/;"	f	typeref:typename:char *
tests	Makefile	/^tests: $(TESTS)$/;"	t
tests	Makefile	/^tests: CFLAGS += $(TARGET)$/;"	t
tests_run	tests/minunit.h	/^int tests_run;$/;"	v	typeref:typename:int
value	src/lcthw/list.h	/^    void *value; $/;"	m	struct:ListNode	typeref:typename:void *
